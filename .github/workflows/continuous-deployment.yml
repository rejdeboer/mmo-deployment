name: Continuous deployment

on:
  push:
    paths:
      - ".github/**"
      - "terraform/**"
  workflow_dispatch:

permissions:
      id-token: write

env:
  ARM_CLIENT_ID: ${{ vars.AZ_CLIENT_ID }}
  ARM_SUBSCRIPTION_ID: ${{ vars.AZ_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ vars.AZ_TENANT_ID }}

jobs:
  terraform:
    name: Terraform
    runs-on: ubuntu-latest
    environment: Production
    outputs:
      resource_group_name: ${{ steps.set_aks_vars.outputs.resource_group_name }}
      cluster_name: ${{ steps.set_aks_vars.outputs.cluster_name }}
    steps:
      - name: Checkout master
        uses: actions/checkout@master
        with:
          token: ${{ secrets.GH_PAT }}

      - name: Azure login
        uses: azure/login@v1
        with:
          client-id: ${{ vars.AZ_CLIENT_ID }} 
          tenant-id: ${{ vars.AZ_TENANT_ID }}
          subscription-id: ${{ vars.AZ_SUBSCRIPTION_ID }}
          enable-AzPSSession: false 

      - name: Get branch names
        id: branch-names
        uses: tj-actions/branch-names@v8

      - name: Deploy infrastructure
        uses: ./.github/actions/deploy-terraform
        with:
          WORKING_DIRECTORY: ./terraform/production
        env:
          TF_VAR_cloudflare_api_token: ${{ secrets.CLOUDFLARE_API_TOKEN }}

      - name: Set resource group and cluster name
        id: set_aks_vars
        run: |
          RG_NAME=$(terraform -chdir=terraform/production output -raw resource_group_name)
          CLUSTER_NAME=$(terraform -chdir=terraform/production output -raw cluster_name)
          AKS_IDENTITY_ID=$(terraform -chdir=terraform/production output -raw aks_identity_id)
          echo "resource_group_name=$RG_NAME" >> $GITHUB_OUTPUT
          echo "cluster_name=$CLUSTER_NAME" >> $GITHUB_OUTPUT
          echo "aks_identity_id=$AKS_IDENTITY_ID" >> $GITHUB_OUTPUT

      - name: Bootstrap cluster
        uses: ./.github/actions/deploy-terraform
        with:
          WORKING_DIRECTORY: ./terraform/cluster-bootstrap
          STATE_CONTAINER: production
        env:
          TF_VAR_cluster_name: ${{ steps.set_aks_vars.outputs.cluster_name }}
          TF_VAR_resource_group_name: ${{ steps.set_aks_vars.outputs.resource_group_name }}
          TF_VAR_aks_identity_id: ${{ steps.set_aks_vars.outputs.aks_identity_id }}
          TF_VAR_github_org: ${{ github.repository_owner }}
          TF_VAR_github_repository: ${{ github.event.repository.name }}
          TF_VAR_github_token: ${{ secrets.GH_PAT }}
          TF_VAR_github_branch: ${{ steps.branch-names.outputs.current_branch }}

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: Production
    needs: terraform
    steps:
      - name: Checkout master
        uses: actions/checkout@master
        with:
          token: ${{ secrets.GH_PAT }}

      - name: Setup Flux
        uses: fluxcd/flux2/action@main

      - name: Azure login
        uses: azure/login@v2
        with:
          client-id: ${{ vars.AZ_CLIENT_ID }} 
          tenant-id: ${{ vars.AZ_TENANT_ID }}
          subscription-id: ${{ vars.AZ_SUBSCRIPTION_ID }}

      - name: Set AKS context
        id: set_context
        uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ needs.terraform.outputs.resource_group_name }}
          cluster-name: ${{ needs.terraform.outputs.cluster_name }}

      - name: Setup kubectl
        id: install-kubectl
        uses: azure/setup-kubectl@v3

      # - name: Run kubectl pre-deployment scripts
      #   run: |
      #     ./scripts/install-eck.sh

      - name: Verify cluster reconciliation
        run: |
          kubectl -n flux-system wait kustomization/infrastructure-controllers --for=condition=ready --timeout=5m

      - name: Debug failure
        if: failure()
        run: |
          kubectl -n flux-system get all
          kubectl -n flux-system logs deploy/source-controller
          kubectl -n flux-system logs deploy/kustomize-controller
          kubectl -n flux-system logs deploy/helm-controller
          flux get all --all-namespaces
